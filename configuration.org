#+TITLE: Emacs Configuration
#+AUTHOR: Adrien Brochard

* How to use
The =.emacs= file in home directory should only contain
#+BEGIN_SRC emacs-lisp :tangle no
(load-file "~/emacs-config/bootstrap.el")
#+END_SRC
where the path to bootstrap.el is adjusted to wherever you cloned this repo.
This will also automatically pull the latest version of the config on startup, unless you forbid it with
#+BEGIN_SRC emacs-lisp :tangle no
(setq config-no-auto-update t)
#+END_SRC

* Add Package Repositories
#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(package-initialize)
#+END_SRC



* Automatic package installation
** Install =use-package=
And its dependencies if needed.
#+BEGIN_SRC emacs-lisp
(mapc
 (lambda (package)
   (if (not (package-installed-p package))
       (progn
         (package-refresh-contents)
         (package-install package))))
 '(use-package diminish bind-key))
#+END_SRC
** Trigger =use-package=
And force the install of missing packages.
#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (require 'use-package))
(require 'diminish)
(require 'bind-key)
(setq use-package-always-ensure t)
#+END_SRC


* Configure Helm
Make everything fuzzy and also rebind functions.
#+BEGIN_SRC emacs-lisp
  (use-package flx)
  (use-package helm-flx)
  (use-package helm
    :demand
    :diminish helm-mode
    :bind (("M-x" . helm-M-x)
           ("M-y" . helm-show-kill-ring)
           ("C-x b" . helm-mini)
           ("C-x C-f" . helm-find-files)
           ("C-x r l" . helm-bookmarks)
           ("C-c C-i" . helm-semantic-or-imenu)
           :map helm-find-files-map ;; I like these from Ido
           ("C-<tab>"         . helm-execute-persistent-action)
           ("C-<backspace>" . helm-find-files-up-one-level))
    :config
    (helm-mode 1)
    (helm-flx-mode +1)
    (setq helm-M-x-fuzzy-match t)
    (setq helm-locate-fuzzy-match t)
    (setq helm-lisp-fuzzy-completion t)
    (setq helm-bookmark-show-location t))
  (use-package helm-swoop
    :bind ("C-c s" . helm-swoop)
    :config (setq helm-swoop-speed-or-color t))
#+END_SRC


* Version Control
For now it's just git, but can add more systems as necessary.
** Enable magit
Best git client
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-status))
#+END_SRC
** Add =git-timemachine=
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine)
#+END_SRC


* Set personal information
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Adrien Brochard"
        calendar-latitude 40.7
        calendar-longitude -73.98
        calendar-location-name "New York, NY")
#+END_SRC


* Utility functions
** Generate scratch buffer
#+BEGIN_SRC emacs-lisp
(defun generate-scratch-buffer ()
  "Create and switch to a temporary scratch buffer with a random
     name."
  (interactive)
  (switch-to-buffer (make-temp-name "scratch-")))
#+END_SRC

** Sudo the current buffer
#+BEGIN_SRC emacs-lisp
(defun sudo ()
  "Use TRAMP to `sudo' the current buffer"
  (interactive)
  (when buffer-file-name
    (find-alternate-file
     (concat "/sudo:root@localhost:"
             buffer-file-name))))
#+END_SRC

** Show xkcd on start
#+BEGIN_SRC emacs-lisp
(use-package xkcd)
(defun showxkcd ()
  "Call this to show xkcd comic of the day on start"
  (require 'xkcd)
  (xkcd)
  (switch-to-buffer "*xkcd*"))
#+END_SRC

** Replace JSON web token in buffer
This is regexp based
#+BEGIN_SRC emacs-lisp
(defun replace-token (token)
  "Replace JSON web token for requests"
  (interactive "sEnter the new token: ")
  (save-excursion
    (goto-char (point-min))
    (while (re-search-forward "Bearer .*\"" nil t)
      (replace-match (concat "Bearer " token "\"")))))
#+END_SRC

** Open all marked files in Dired
I like this better than the one in =dired+=
#+BEGIN_SRC emacs-lisp
(eval-after-load "dired"
  '(progn
     (define-key dired-mode-map "F" 'my-dired-find-file)
     (defun my-dired-find-file (&optional arg)
       "Open each of the marked files, or the file under the point, or when prefix arg, the next N files "
       (interactive "P")
       (let* ((fn-list (dired-get-marked-files nil arg)))
         (mapc 'find-file fn-list)))))
#+END_SRC

** Open the current file in browser.
Thanks to [[https://github.com/purcell/emacs.d/blob/master/lisp/init-utils.el#L78]]
#+BEGIN_SRC emacs-lisp
(defun browse-current-file ()
  "Open the current file as a URL using `browse-url'."
  (interactive)
  (let ((file-name (buffer-file-name)))
    (if (and (fboundp 'tramp-tramp-file-p)
             (tramp-tramp-file-p file-name))
        (error "Cannot open tramp file")
      (browse-url (concat "file://" file-name)))))
#+END_SRC

** XML Format function
This works well on short text, too much and it can block the system
#+BEGIN_SRC emacs-lisp
(use-package sgml-mode)

(defun reformat-xml ()
  (interactive)
  (save-excursion
    (sgml-pretty-print (point-min) (point-max))
    (indent-region (point-min) (point-max))))
#+END_SRC

** Refill paragraphs to be on one line
#+BEGIN_SRC emacs-lisp
(defun refill-paragraphs ()
  "fill individual paragraphs with large fill column"
  (interactive)
  (let ((fill-column 100000))
    (fill-individual-paragraphs (point-min) (point-max))))
#+END_SRC

** Copy filename and path to clipboard
Thanks to http://emacsredux.com/blog/2013/03/27/copy-filename-to-the-clipboard/
#+BEGIN_SRC emacs-lisp
(defun copy-filename ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
#+END_SRC

** Align docstring
I put a double space in between what I want to align and call this:
#+BEGIN_SRC emacs-lisp
(defun align-docstring ()
  "Align lines by double space"
  (interactive)
  (align-regexp (region-beginning) (region-end) "\\(\\s-*\\)  " 1 1 t))
#+END_SRC

** Rename local variable
#+BEGIN_SRC emacs-lisp
(defun rename-local-var (name)
  (interactive "sEnter new name: ")
  (let ((var (word-at-point)))
    (mark-defun)
    (replace-string var name nil (region-beginning) (region-end))))
#+END_SRC

** Increment/decrement number at point
I miss that from Vim
#+BEGIN_SRC emacs-lisp
  (defun increment-number-at-point ()
    (interactive)
    (skip-chars-backward "0-9")
    (or (looking-at "[0-9]+")
        (error "No number at point"))
    (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))

  (defun decrement-number-at-point ()
    (interactive)
    (skip-chars-backward "0-9")
    (or (looking-at "[0-9]+")
        (error "No number at point"))
    (replace-match (number-to-string (- (string-to-number (match-string 0)) 1))))
#+END_SRC

** Comment a line
Before Emacs 25.1
#+BEGIN_SRC emacs-lisp
  (defun comment-line ()
    (interactive)
    (save-excursion
      (end-of-line)
      (set-mark (point))
      (beginning-of-line)
      (if (comment-only-p (region-beginning) (region-end))
          (uncomment-region (region-beginning) (region-end))
        (comment-region (region-beginning) (region-end)))))
#+END_SRC
* Custom key bindings
** Quickly revert a buffer
Useful if file changed on disk
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-c r") 'revert-buffer)
#+END_SRC

** Quickly evaluate a buffer or a region
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-c x") 'eval-buffer)
(define-key global-map (kbd "C-c X") 'eval-region)
#+END_SRC

** Use the Mac Style Home/End keys
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<home>") 'beginning-of-buffer)
(global-set-key (kbd "<end>") 'end-of-buffer)
#+END_SRC

** Quickly turn on auto-fill
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c q") 'auto-fill-mode)
#+END_SRC

** Hungry delete forward available everywhere
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c C-d") 'c-hungry-delete-forward)
#+END_SRC

** Increment number easily
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c +") 'increment-number-at-point)
  (global-set-key (kbd "C-c -") 'decrement-number-at-point)
#+END_SRC

** Comment the current line
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-;") 'comment-line)
#+END_SRC


* Publishing and task management with Org-mode
** Set environment
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org")

(defun org-file-path (filename)
  "Return the absolute address of an org file, given its relative name."
  (concat (file-name-as-directory org-directory) filename))
#+END_SRC
** Use syntax highlighting in source blocks while editing
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC
** Setup Org Capture
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC
** Add more states
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "WAIT(w@/!)" "|" "DONE(d!)" "CANCELED(c@)")))
  (setq org-todo-keyword-faces
             '(("WAIT" . "yellow")
               ("CANCELED" . (:foreground "blue" :weight bold))))
#+END_SRC
** Enable =flyspell=
#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'flyspell-mode)
#+END_SRC
** Setup =org-babel=
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 (quote org-babel-load-languages)
 (quote ((emacs-lisp . t)
         (dot . t)
         (R . t)
         (python . t)
         (gnuplot . t)
         (sh . t)
         (ledger . t)
         (org . t)
         (latex . t))))
#+END_SRC

* Register RSS feeds
Uses =elfeed= and =elfeed-org=
#+BEGIN_SRC emacs-lisp
(use-package elfeed
  :bind ("C-x w" . elfeed))

(use-package elfeed-org
  :config
  (setq rmh-elfeed-org-files (list (concat config-load-path "elfeed.org")))
  (elfeed-org))
#+END_SRC
The last line uses the [[file:elfeed.org][elfeed.org]] file to register the feeds.


* Startup behavior
** Toggle fullscreen by default
#+BEGIN_SRC emacs-lisp
(toggle-frame-maximized)
#+END_SRC
** Disable the big fat toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC
** Disable the scroll bar
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
#+END_SRC
** Disable splash screen
And set it in emacs-lisp mode
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq initial-major-mode 'emacs-lisp-mode)
#+END_SRC
** Empty Scratch buffer
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message nil)
#+END_SRC
** Show xkcd comic of the day on start
Only on mac or Linux as windows support isn't there yet.
Disabled for now because too slow on start.
#+BEGIN_SRC emacs-lisp :tangle no
(cond
 ((string-equal system-type "darwin") ; Mac OS X
  (progn
    (showxkcd)))
 ((string-equal system-type "gnu/linux") ; linux
  (progn
    (showxkcd))))
#+END_SRC

* Window behavior
** Disable the bell
Aweful atrocious noise on Windows
#+BEGIN_SRC emacs-lisp
(setq visible-bell 1)
#+END_SRC

** Adjust scrolling behavior
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
#+END_SRC

** Always ask for confirmation before quitting
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC

** Highlight the current line
#+BEGIN_SRC emacs-lisp
(when window-system
  (global-hl-line-mode))
#+END_SRC

* Better defaults
Inspired from [[https://github.com/technomancy/better-defaults]]

** Replace dabbrev with hippie-expand
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-/") 'hippie-expand)
#+END_SRC

** Replace isearch with regexp search
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-s") 'isearch-forward-regexp)
(global-set-key (kbd "C-r") 'isearch-backward-regexp)
(global-set-key (kbd "C-M-s") 'isearch-forward)
(global-set-key (kbd "C-M-r") 'isearch-backward)
#+END_SRC

** Save all backup files to a common folder
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . ,(concat user-emacs-directory
                                               "backups"))))
#+END_SRC

** Replace 'yes/no' by just 'y/n
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Auto reload tags
#+BEGIN_SRC emacs-lisp
(setq tags-revert-without-query 1)
#+END_SRC

* Load Cool Theme
#+BEGIN_SRC emacs-lisp
(use-package dracula-theme
  :config (load-theme 'dracula t))
(set-face-background 'mode-line "#510370")
(set-face-background 'mode-line-inactive "black")
#+END_SRC

* Terminal Configuration
Trying to make it adapt to the OS.
There is surely a better way to do this.
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt)
    (progn
      (setenv "PATH" (concat "C:\\cygwin64\\bin\\"
                             path-separator
                             (getenv "PATH")))
      )
  (progn
    (use-package exec-path-from-shell
      :config (exec-path-from-shell-copy-env "PATH"))
    )
  )
#+END_SRC


* Dictionary Configuration
Because Windows sucks I have to do this to use =flyspell=
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt)
    (progn
      (add-to-list 'exec-path "C:/Aspell/bin/")
      (setq ispell-program-name "aspell")
      (require 'ispell)
      )
  )
#+END_SRC


* Code Format
** Default tab and indetation
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq tab-width 4)
#+END_SRC
** Add a new line at the end of files
#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC
** Delete trailing white spaces on save
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
* Parenthesis Support
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(electric-pair-mode 1)
#+END_SRC


* Navigation
** Enable =avy=
#+BEGIN_SRC emacs-lisp
(use-package avy
  :bind ("C-c SPC" . avy-goto-char))
#+END_SRC

** Enable =win-switch=
Super nice to switch between frames and buffers
#+BEGIN_SRC emacs-lisp
(use-package win-switch
  :bind ("C-x o" . win-switch-dispatch)
  :config
  (setq win-switch-provide-visual-feedback t)
  (setq win-switch-feedback-background-color "purple")
  (setq win-switch-feedback-foreground-color "white")
  (win-switch-setup-keys-default))
#+END_SRC

** Enable =which-key=
Very nice if you don't have a cheat sheet at hand
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :config (which-key-mode 1))
#+END_SRC

** Enable =winner-mode=
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC
** Enable =smooth-scrolling=
But with a margin of 5
#+BEGIN_SRC emacs-lisp
(use-package smooth-scrolling
  :config
  (smooth-scrolling-mode 1)
  (setq smooth-scroll-margin 5))
#+END_SRC

** Enable =neotree=
#+BEGIN_SRC emacs-lisp
(use-package neotree)
#+END_SRC
** Enable =ibuffer=
#+BEGIN_SRC emacs-lisp
(use-package ibuffer-vc)
(use-package ibuffer-git)
(define-key global-map (kbd "C-x C-b") 'ibuffer)
#+END_SRC
** Enable =yascroll=
So much better than the default scroll bar
#+BEGIN_SRC emacs-lisp
(use-package yascroll
  :config (global-yascroll-bar-mode 1))
#+END_SRC
** Enable =minimap=
Not all the time, but handy.
#+BEGIN_SRC emacs-lisp
(use-package minimap
  :config
  (setq minimap-window-location "right")
  (setq minimap-major-modes '(prog-mode org-mode)))
#+END_SRC
** Enable =rotate=
#+BEGIN_SRC emacs-lisp
(use-package rotate)
#+END_SRC
** Enable =anzu=
#+BEGIN_SRC emacs-lisp
(use-package anzu
  :config (global-anzu-mode +1)
          (setq anzu-mode-lighter ""))
#+END_SRC
* Edition
** Enable =multiple-cursors=
Useful to edit multiple similar lines
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :bind (("C-S-c C-S-c" . mc/edit-lines)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-c C-<" . mc/mark-all-like-this)
         ("C-S-<mouse-1>" . mc/add-cursor-on-click)))
#+END_SRC

** Enable =zzz-to-char=
#+BEGIN_SRC emacs-lisp
(use-package zzz-to-char
  :bind ("M-z" . zzz-up-to-char))
#+END_SRC
** Enable =whole-line-or-region=
#+BEGIN_SRC emacs-lisp
(use-package whole-line-or-region
  :diminish whole-line-or-region-mode
  :config (whole-line-or-region-mode))
#+END_SRC
** Enable =viking-mode=
And add my personal twist to it.
#+BEGIN_SRC emacs-lisp
  (use-package viking-mode
    :diminish viking-mode
    :config
    (viking-global-mode)
    (setq viking-greedy-kill nil)
    (setq viking-enable-region-kill t)
    (setq viking-kill-functions (list '(lambda()
                                         (if (region-active-p)
                                             (kill-region (region-beginning) (region-end))
                                         (delete-char 1 t)))
                                      '(lambda()
                                         (insert (pop kill-ring)) ;; insert the char back
                                         (kill-new "") ;; start a new entry in the kill-ring
                                         (viking-kill-word)
                                         (kill-append " " nil)) ;; append the extra space
                                      'viking-kill-line-from-point
                                      'viking-kill-line
                                      'viking-kill-paragraph
                                      'viking-kill-buffer)))
#+END_SRC

** Enable =undo-tree=
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (global-undo-tree-mode t)
  (setq undo-tree-visualizer-diff t))
#+END_SRC

** Enable =volatile-highlights=
Sweet minor mode for providing visual feedback
#+BEGIN_SRC emacs-lisp
(use-package volatile-highlights
  :diminish volatile-highlights-mode
  :config
  (vhl/define-extension 'undo-tree 'undo-tree-yank 'undo-tree-move)
  (vhl/install-extension 'undo-tree)
  (volatile-highlights-mode t))
#+END_SRC

** Enable =ciel=
#+BEGIN_SRC emacs-lisp
(use-package ciel
  :bind (("C-c i" . ciel-ci)
         ("C-c o" . ciel-co)))
#+END_SRC
* General Code
** Enable =yasnippet=
Enable everywhere
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :diminish yas-minor-mode
  :config (yas-global-mode 1))
#+END_SRC

** Enable =projectile=
And get a shorter modeline, thanks to [[https://github.com/purcell/emacs.d/blob/master/lisp/init-projectile.el#L10]]
#+BEGIN_SRC emacs-lisp
(use-package ag)
(use-package helm-ag)
(setq projectile-go-function nil) ;; temporary workaround
(use-package projectile
  :config
  (projectile-global-mode)
  (setq-default
   projectile-mode-line
   '(:eval
     (if (file-remote-p default-directory)
         " Proj"
       (format " Proj[%s]" (projectile-project-name))))))
#+END_SRC

With a twist of helm
#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :bind (("C-c v" . helm-projectile)
         ("C-c C-v" . helm-projectile-ag)
         ("C-c w" . helm-projectile-switch-project)))
#+END_SRC

** Enable =company=
#+BEGIN_SRC emacs-lisp
(use-package company
  :diminish company-mode
  :config
  (add-hook 'after-init-hook 'global-company-mode))
(use-package company-go)
#+END_SRC
** Enable =flycheck=
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :diminish flycheck-mode
  :config (flycheck-mode 1)
  (add-hook 'python-mode-hook 'flycheck-mode)
  (add-hook 'emacs-lisp-mode-hook 'flycheck-mode))

#+END_SRC

Add a little helm twist to it
#+BEGIN_SRC emacs-lisp
(use-package helm-flycheck
  :bind ("C-c f" . helm-flycheck))
#+END_SRC

** Enable =electric-operator=
And add a rule for PHP
#+BEGIN_SRC emacs-lisp
(use-package electric-operator
  :config
  (electric-operator-add-rules-for-mode 'php-mode
                                        (cons " - >" "->"))
  (electric-operator-add-rules-for-mode 'php-mode
                                        (cons " / /" "// "))
  (electric-operator-add-rules-for-mode 'php-mode
                                        (cons " = > " " => "))
  (electric-operator-add-rules-for-mode 'php-mode
                                        (cons " < ?" "<?")))
#+END_SRC

** Enable =dumb-jump=
Great package to jump to definition
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump)
#+END_SRC
* Emacs Lisp
** Enable =eldoc=
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
#+END_SRC
** Enable =rainbow-delimiters=
But only for emacs-lisp
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :config
  (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
** Enable =paredit=
#+BEGIN_SRC emacs-lisp
(use-package paredit
  :config
  (add-hook 'emacs-lisp-mode-hook 'paredit-mode))
#+END_SRC
* MySQL
** Always make MySQL the default product
#+BEGIN_SRC emacs-lisp
(require 'sql)
(sql-set-product "mysql")
#+END_SRC
** Enable =sqlup-mode=
#+BEGIN_SRC emacs-lisp
(use-package sqlup-mode
  :config (add-hook 'sql-mode-hook 'sqlup-mode))
#+END_SRC
** Enable =mysql-to-org=
I love this package
#+BEGIN_SRC emacs-lisp
(use-package mysql-to-org
  :config
  (add-hook 'sql-mode-hook 'mysql-to-org-mode))
#+END_SRC
* PHP
** Enable =php-mode=
And a bunch of hooks with it
And set PSR-2 as coding style
#+BEGIN_SRC emacs-lisp
  (use-package php-mode
    :config
    (add-hook 'php-mode-hook 'flycheck-mode)
    (add-hook 'php-mode-hook 'electric-operator-mode)
    (add-hook 'php-mode-hook 'dumb-jump-mode)
    (add-hook 'php-mode-hook 'php-enable-psr2-coding-style))
#+END_SRC
** Enable =php-eldoc=
#+BEGIN_SRC emacs-lisp
(use-package php-eldoc
  :diminish eldoc-mode
  :config (add-hook 'php-mode-hook 'php-eldoc-enable))
#+END_SRC
** Enable =company-php=
#+BEGIN_SRC emacs-lisp
(use-package company-php
  :config
  (add-hook 'php-mode-hook
            '(lambda ()
               (company-mode t)
               (add-to-list 'company-backends 'company-ac-php-backend ))))
#+END_SRC
* Web
** Enable =web-mode=
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode "\\.phtml\\'"
  :mode "\\.volt\\'")
#+END_SRC

** Enable =emmet-mode=
Adding the necessary hooks
#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :config
  (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
  )
#+END_SRC

* Go
** Enable =go-mode=
Absolutely necessary if working in Go
#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :config
    (add-hook 'before-save-hook #'gofmt-before-save)
    (add-hook 'go-mode-hook 'flycheck-mode))
#+END_SRC

** Enable =company-go=
#+BEGIN_SRC emacs-lisp
(use-package company-go
  :config
  (add-hook 'go-mode-hook
            '(lambda ()
               (company-mode t)
               (add-to-list 'company-backends 'company-go))))
#+END_SRC
* Python
** Enable =eldoc=
#+BEGIN_SRC emacs-lisp
(add-hook 'python-mode-hook 'eldoc-mode)
#+END_SRC
** Enable =anaconda=
Set iPython as the default interpreter
#+BEGIN_SRC emacs-lisp
(use-package anaconda-mode
  :config
  (setq python-shell-interpreter "~/anaconda/bin/ipython")
  (add-hook 'python-mode-hook 'anaconda-mode))
#+END_SRC


* Extra Packages
No need to configure, just handy to have.
#+BEGIN_SRC emacs-lisp
(require 'dired-x)
(use-package 2048-game)
(use-package isend-mode)
(use-package lorem-ipsum)
(use-package markdown-mode)
(use-package pdf-tools)
(use-package refine)
(use-package request)
#+END_SRC

* Extra file loading
If I am working on a separate library, I like to have it loaded on start.
Just need to place it in the extra folder.
#+BEGIN_SRC emacs-lisp
(use-package load-dir
  :config (setq load-dirs (concat config-load-path "extra/")))
#+END_SRC


* Key Frequency
Trying the =keyfreq= package to monitor my command usage
#+BEGIN_SRC emacs-lisp
  (use-package keyfreq
    :config
    (keyfreq-mode 1)
    (keyfreq-autosave-mode 1))
#+END_SRC
* Cheat Sheet
Thanks to the =cheatsheet= package, I can quickly see what are my favorite keys bindings
#+INCLUDE: "./cheatsheet.org"
