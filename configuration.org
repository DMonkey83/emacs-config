#+TITLE: Emacs configuration

* How to use
The =.emacs= file in home directory should only contain
#+BEGIN_SRC emacs-lisp :tangle no
(require 'org)
(org-babel-load-file "~/.emacs.d/configuration.org")
#+END_SRC
or whatever path to this file


* Add Melpa Repo
#+BEGIN_SRC emacs-lisp
(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list
   'package-archives
   '("melpa" . "http://melpa.org/packages/")
   t)
  (package-initialize))
#+END_SRC



* Automatic package installation
*Ideally this should be replaced by Cask and Pallet, but Windows...* \\
List all required packages
#+BEGIN_SRC emacs-lisp
(setq package-list '(magit flycheck company web-mode dracula-theme
go-mode yasnippet avy helm win-switch emmet-mode elfeed elfeed-org
multiple-cursors which-key anaconda-mode undo-tree
projectile helm-projectile flx helm-flx diminish ag helm-ag helm-swoop
whole-line-or-region exec-path-from-shell xkcd neotree zzz-to-char))
#+END_SRC

Install them all
#+BEGIN_SRC emacs-lisp
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))
#+END_SRC


* Configure Helm
** Enable Helm
#+BEGIN_SRC emacs-lisp
(require 'helm)
(require 'helm-config)
(helm-mode 1)
#+END_SRC

** Rebind basic commands to use Helm
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-x b") 'helm-mini)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(define-key helm-find-files-map (kbd "<C-backspace>") 'backward-kill-word)
(define-key global-map (kbd "C-c s") 'helm-swoop)
(define-key global-map (kbd "C-x r l") 'helm-bookmarks)
(setq helm-bookmark-show-location t)
#+END_SRC

** Enable everything fuzzy
#+BEGIN_SRC emacs-lisp
(helm-flx-mode +1)
(setq helm-M-x-fuzzy-match t)
(setq helm-locate-fuzzy-match t)
(setq helm-lisp-fuzzy-completion t)
#+END_SRC


* Version Control
For now it's just magit, but can add more systems as necessary.
** Enable magit
Best git client
#+BEGIN_SRC emacs-lisp
(require 'magit)
(global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC


* Set personal information
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Adrien Brochard"
        calendar-latitude 40.7
        calendar-longitude -73.98
        calendar-location-name "New York, NY")
#+END_SRC
* Custom aliases
#+BEGIN_SRC emacs-lisp
(defalias 'qrr 'quickrun-region)
(defalias 'fff 'fiplr-find-file)
(defalias 'ffd 'fiplr-find-directory)
#+END_SRC

* Custom key bindings
Quickly revert a buffer, useful if file changed on disk
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-c r") 'revert-buffer)
#+END_SRC
Quickly evaluate a buffer or a region
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-c x") 'eval-buffer)
(define-key global-map (kbd "C-c X") 'eval-region)
#+END_SRC

Make helm-imenu easier to acces
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "C-c i") 'helm-semantic-or-imenu)
#+END_SRC

Use the Mac Style Home/End keys
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<home>") 'beginning-of-buffer)
(global-set-key (kbd "<end>") 'end-of-buffer)
#+END_SRC

* Custom hooks
Add hooks for particular file extensions
#+BEGIN_SRC emacs-lisp
(add-hook 'php-mode-hook 'flycheck-mode)
(add-hook 'after-init-hook 'global-company-mode)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.volt\\'" . web-mode))
#+END_SRC


* Utility functions
Function to generate scratch buffer
#+BEGIN_SRC emacs-lisp
(defun generate-scratch-buffer ()
  "Create and switch to a temporary scratch buffer with a random
     name."
  (interactive)
  (switch-to-buffer (make-temp-name "scratch-")))
#+END_SRC

Function to sudo the current buffer
#+BEGIN_SRC emacs-lisp
(defun sudo ()
  "Use TRAMP to `sudo' the current buffer"
  (interactive)
  (when buffer-file-name
    (find-alternate-file
     (concat "/sudo:root@localhost:"
             buffer-file-name))))
#+END_SRC

Function to show xkcd on start
#+BEGIN_SRC emacs-lisp
(defun showxkcd ()
  "Call this to show xkcd comic of the day on start"
  (require 'xkcd)
  (xkcd)
  (switch-to-buffer "*xkcd*"))
#+END_SRC

Regexp based function to replace JSON web token in buffer
#+BEGIN_SRC emacs-lisp
(defun replace-token (token)
  "Replace JSON web token for requests"
  (interactive "sEnter the new token: ")
  (while (re-search-forward "Bearer .*\"" nil t)
    (replace-match (concat "Bearer " token "\""))))
#+END_SRC

Function for Dired to open all marked files. I like this better than the one in =dired+=
#+BEGIN_SRC emacs-lisp
(eval-after-load "dired"
  '(progn
     (define-key dired-mode-map "F" 'my-dired-find-file)
     (defun my-dired-find-file (&optional arg)
       "Open each of the marked files, or the file under the point, or when prefix arg, the next N files "
       (interactive "P")
       (let* ((fn-list (dired-get-marked-files nil arg)))
         (mapc 'find-file fn-list)))))
#+END_SRC


* Publishing and task management with Org-mode
** Set environment
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org")

(defun org-file-path (filename)
  "Return the absolute address of an org file, given its relative name."
  (concat (file-name-as-directory org-directory) filename))
#+END_SRC
** Use syntax highlighting in source blocks while editing
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC
** Setup Org Capture
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC


* Startup behavior
** Toggle fullscreen by default
#+BEGIN_SRC emacs-lisp
(toggle-frame-maximized)
#+END_SRC
** Disable the big fat toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

** Disable splash screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC
** Empty Scratch buffer
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message nil)
#+END_SRC
** Show xkcd comic of the day on start
Only on mac or Linux as windows support isn't there yet
#+BEGIN_SRC emacs-lisp
(cond
 ((string-equal system-type "darwin") ; Mac OS X
  (progn
    (showxkcd)))
 ((string-equal system-type "gnu/linux") ; linux
  (progn
    (showxkcd))))
#+END_SRC


* Window behavior
** Disable the bell
Aweful atrocious noise on Windows
#+BEGIN_SRC emacs-lisp
(setq visible-bell 1)
#+END_SRC

** Adjust scrolling behavior
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
#+END_SRC

** Always ask for confirmation before quitting
#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+END_SRC


* Hide certain modes from the modeline
Taken from the superb https://github.com/hrs/dotfiles/blob/master/emacs.d/configuration.org#hide-certain-modes-from-the-modeline
#+BEGIN_SRC emacs-lisp
(require 'diminish)
(defmacro diminish-minor-mode (filename mode &optional abbrev)
  `(eval-after-load (symbol-name ,filename)
     '(diminish ,mode ,abbrev)))

(defmacro diminish-major-mode (mode-hook abbrev)
  `(add-hook ,mode-hook
             (lambda () (setq mode-name ,abbrev))))

(diminish-minor-mode 'abbrev 'abbrev-mode)
(diminish-minor-mode 'company 'company-mode)
(diminish-minor-mode 'eldoc 'eldoc-mode)
(diminish-minor-mode 'flycheck 'flycheck-mode)
(diminish-minor-mode 'global-whitespace 'global-whitespace-mode)
(diminish-minor-mode 'undo-tree 'undo-tree-mode)
(diminish-minor-mode 'yasnippet 'yas-minor-mode)
(diminish-minor-mode 'paredit 'paredit-mode " Ï€")
(diminish-minor-mode 'auto-revert-mode 'auto-revert-mode)
(diminish-minor-mode 'which-key 'which-key-mode)
(diminish-minor-mode 'viking-mode 'viking-mode)
(diminish-minor-mode 'helm 'helm-mode)
(diminish-minor-mode 'whole-line-or-region 'whole-line-or-region-mode)
#+END_SRC

* Highlight the current line
#+BEGIN_SRC emacs-lisp
(when window-system
  (global-hl-line-mode))
#+END_SRC


* Setup =projectile=
#+BEGIN_SRC emacs-lisp
(require 'projectile)
(require 'helm-projectile)
(projectile-global-mode)
#+END_SRC
Remap the shortcut
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c v") 'helm-projectile)
(global-set-key (kbd "C-c C-v") 'helm-projectile-ag)
#+END_SRC

* Load Cool Theme
#+BEGIN_SRC emacs-lisp
(require 'dracula-theme)
(load-theme 'dracula t)
#+END_SRC

* Terminal Configuration
Trying to make it adapt to the OS
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt)
    (progn
      (setenv "PATH" (concat "C:\\cygwin64\\bin\\"
                             path-separator
                             (getenv "PATH")))
      )
  (progn
    (exec-path-from-shell-copy-env "PATH")
    )
  )
#+END_SRC


* Code Format
** Default tab and indetation
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq tab-width 4)
#+END_SRC
** Delete trailing white spaces on save
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
** XML Format function
This works well on short text, too much and it can block the system
#+BEGIN_SRC emacs-lisp
(require 'sgml-mode)

(defun reformat-xml ()
  (interactive)
  (save-excursion
    (sgml-pretty-print (point-min) (point-max))
    (indent-region (point-min) (point-max))))
#+END_SRC

** Golang Format
Absolutely necessary if working in Go
#+BEGIN_SRC emacs-lisp
(require 'go-mode)
(add-hook 'before-save-hook #'gofmt-before-save)
#+END_SRC

* Parenthesis Support
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(electric-pair-mode 1)
#+END_SRC


* Configure =yasnippet=
Enable everywhere
#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(yas-global-mode 1)
#+END_SRC


* Enable =flycheck=
#+BEGIN_SRC emacs-lisp
(require 'flycheck)
(flycheck-mode 1)
#+END_SRC

* Enable =avy=
#+BEGIN_SRC emacs-lisp
(require 'avy)
(define-key global-map (kbd "C-c SPC") 'avy-goto-char)
#+END_SRC

* Enable =win-switch= behavior
Super nice to switch between frames and buffers
#+BEGIN_SRC emacs-lisp
(require 'win-switch)
(global-set-key (kbd "C-x o") 'win-switch-dispatch)
(win-switch-setup-keys-default)
#+END_SRC

* Enable =emmet-mode=
Adding the necessary hooks
#+BEGIN_SRC emacs-lisp
(require 'emmet-mode)
(add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
(add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
#+END_SRC

* Enable =multiple-cursors=
Useful to edit multiple similar lines
#+BEGIN_SRC emacs-lisp
(require 'multiple-cursors)
(global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
#+END_SRC

* Enable =which-key=
Very nice if you don't have a cheat sheet at hand
#+BEGIN_SRC emacs-lisp
(require 'which-key)
(which-key-mode 1)
#+END_SRC

* Enable =undo-tree=
#+BEGIN_SRC emacs-lisp
(require 'undo-tree)
(global-undo-tree-mode t)
(setq undo-tree-visualizer-diff t)
#+END_SRC
* Enable winner-mode
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC
* Enable =whole-line-or-region=
#+BEGIN_SRC emacs-lisp
(require 'whole-line-or-region)
(whole-line-or-region-mode)
#+END_SRC

* Enable =zzz-to-char=
#+BEGIN_SRC emacs-lisp
(require 'zzz-to-char)
(global-set-key (kbd "M-z") #'zzz-up-to-char)
#+END_SRC
* Enabling =dired-x=
#+BEGIN_SRC emacs-lisp
(require 'dired-x)
#+END_SRC


* Python setup with =anaconda=
Add hooks
#+BEGIN_SRC emacs-lisp
(require 'anaconda-mode)
(add-hook 'python-mode-hook 'anaconda-mode)
(add-hook 'python-mode-hook 'eldoc-mode)
(add-hook 'python-mode-hook 'flycheck-mode)
#+END_SRC
Set iPython as the default interpreter
#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "~/anaconda/bin/ipython")
#+END_SRC

* Register RSS feeds
Uses =elfeed= and =elfeed-org=
#+BEGIN_SRC emacs-lisp
(require 'elfeed)
(require 'elfeed-org)
(global-set-key (kbd "C-x w") 'elfeed)
(elfeed-org)
(setq rmh-elfeed-org-files (list (concat (file-name-directory load-file-name) "elfeed.org")))
#+END_SRC
The last line uses the [[file:elfeed.org][elfeed.org]] file to register the feeds.
